应用安装分析：

一、PackageManagerService
	Android系统在启动的过程中，会启动一个应用程序管理服务PackageManagerService，这个服务负责扫描系统中特定的目录，找到里面的应用程序文件，即以Apk为后缀的文件，然后对这些文件进解析，得到应用程序的相关信息，完成应用程序的安装过程。
	应用程序管理服务PackageManagerService安装应用程序的过程，其实就是解析析应用程序配置文件AndroidManifest.xml的过程，并从里面得到得到应用程序的相关信息，例如得到应用程序的组件Activity、Service、Broadcast Receiver和Content Provider等信息，有了这些信息后，通过ActivityManagerService这个服务，我们就可以在系统中正常地使用这些应用程序了。

二、Android应用APK安装的方式
	（1）系统应用安装：开机时加载系统的APK和应用，没有安装界面；
	（2）网络下载应用安装：通过各种market应用完成，没有安装界面；
	（3）ADB工具安装：即通过Android的SDK开发tools里面的adb.exe程序安装，没有安装界面；
	（4）第三方应用安装：通过SD卡里的APK文件安装(比如双击APK文件触发)，有安装界面，

	系统默认已经安装了一个安装卸载应用的程序，即由packageinstaller.apk应用处理安装及卸载过程的界面。

三、程序安装的4大步骤
（1） 拷贝apk文件到指定目录
	在Android系统中，apk安装文件是会被保存起来的，默认情况下，用户安装的apk首先会被拷贝到 /data/app 目录下。
	/data/app目录是用户有权限访问的目录，在安装apk的时候会自动选择该目录存放用户安装的文件，而系统出厂的apk文件则被放到了 /system 分区下,包括 /system/app，/system/vendor/app，以及 /system/priv-app 等等，该分区只有Root权限的用户才能访问
（2） 解压apk，拷贝文件，创建应用的数据目录
	为了加快app的启动速度，apk在安装的时候，会首先将app的可执行文件（dex）拷贝到 /data/dalvik-cache 目录，缓存起来。
	然后，在/data/data/目录下创建应用程序的数据目录（以应用的包名命名），存放应用的相关数据，
	如数据库、xml文件、cache、二进制的so动态库等等。
（3） 解析apk的AndroidManifinest.xml文件
	Android系统中，也有一个类似注册表的东西，用来记录当前所有安装的应用的基本信息，每次系统安装或者卸载了任何apk文件，都会更新这个文件。这个文件位于如下目录：/data/system/packages.xml
	系统在安装apk的过程中，会解析apk的AndroidManifinest.xml文件，提取出这个apk的重要信息写入到packages.xml文件中，这些信息包括：权限、应用包名、APK的安装位置、版本、userID等等。
（4） 显示快捷方式
	这些应用程序只是相当于在PackageManagerService服务注册好了，如果我们想要在Android桌面上看到这些应用程序，还需要有一个Home应用程序，负责从PackageManagerService服务中把这些安装好的应用程序取出来，并以友好的方式在桌面上展现出来，例如以快捷图标的形式。
	在Android系统中，负责把系统中已经安装的应用程序在桌面中展现出来的Home应用程序就是Launcher了


应用安装对比：
小米6  系统：Android8.0  运存：6G  内存：64G

够用   size：23.76M
Time:  3.87s	3.61s	3.52s	3.92s	3.47s	3.54s	3.55s

影音先锋apk  size:21.36M
Time:  4.5s     4.1s    3.89s   4.0s    4.06s   4.09s   4.35s

搜狗输入法  size：23.4M
Time:  5.14s	5.41s	5.37s	5.63s	5.54s	5.37s	5.44s

QQ国际版	size：22.74M
Time:  5.56s	6.03s	5.93s	6.14s	6.06s	6.11s	5.79s





应用启动分析

一、应用的启动方式
	（1）冷启动
		冷启动代表app从运存数据完全被擦除的状态启动启动的过程,在此之前，app所属的进程还未被创建.冷启动一般发生在系统重启后或者app被系统杀死后app首次被启动，冷启动分为以下三个步骤:
		加载并启动app
		启动后展示系统配置的空白Window
		创建app进程

		在创建完app进程后，则会进行下面几个步骤:
		创建app用到的对象
		启动主线程（UI线程）
		创建app的main activity
		加载activity的view
		布局屏幕
		完成首帧的绘制
		而一旦完成首帧的绘制后，系统会将当前展示的background-window换出，替换为main-activity的背景。从这个时间点开始，用户就可以开始使用app了

		两个重要的时间点
		第一个需要注意的时间点是，当我们点击launcher上的应用图标后，首先出现的是系统绘制的window的默认背景,根据app使用的不同theme.这个默认背景是白色或黑色的空白屏幕，在性能较好的机器上，这个默认背景可能会一晃而过，但在某些性能较差的机器或者机器卡顿的情况下会导致白屏停留时间过长，所以启动屏的默认背景是一个需要优化的点.

		第二个需要注意的地方是首帧的绘制时机，实际上我们知道在包括 Application.onCreate() ,Activity.onCreate() ，Activity.onResume() 等生命周期回掉函数执行时，view的布局和绘制都还没有开始，在这些生命周期回调函数中，如果对一些短小的操作耗时操作做异步处理,很可能造成负优化的效果(线程切换增加耗时，实际上没有延时的效果)，最好的做法应该是在首帧绘制完成的前后异步处理耗时的逻辑.

	(2) 热启动
	应用程序的热启动要比冷启动简单，消耗也更少，热启动的常见场景就是app的前后台切换.在从后台切换到前台的过程中，如果应用程序的activities还驻留在内存中，app就不需要再重复经历对象初始化，布局加载和渲染这些步骤.
	但是，如果某些内存因为内存整理(比如说onTrimMemory())而导致被清理，那么在响应热启动事件时这些被清理的对象就需要重新创建.
	热启动和冷启动在屏幕表现上一致，在app完成activity的渲染之前都会一直展示空白屏幕.

	(3) 温启动
	温启动这个名词平时不常见到，官方文档中是这样解释的:温启动包含了冷启动的一部分操作集，同时它的消耗要比冷启动要少.温启动的常见场景如下:

	1.用户退出app后重新进入(很多app会在退出时重新启动一个新的实例做到常驻，这里只讨论部不常驻的场景)。
	  当app退出后，进程有可能仍在运行，这时候如果重新启动app,那么activity必须要从onCreate()生命周期开始重新创建.
	2.系统干掉了驻留内存的app。这时如果重新启动app，那么进程和activity都是需要重新创建，但onCreate() 会传入 
	  saveInstance,通过使用saveInstance可以节省耗时.总的来说温启动在耗时上介于冷启动和热启动之间

二、统计应用启动时间
	adb shell am start
	adb shell am start -W -S [packageName]/[ActivityPath]

三、优化应用的启动时间
	（1）优化方向
		1.优化进程创建过程的耗时(在应用层面就是优化Application的生命周期函数内的耗时操作)
		2.优化 Activity的创建过程

	（2）优化Applicatoin.onCreate()中的耗时操作
	 通过延时和异步来解决第三方库和工具类的初始化工作
	 1.全局管理类的初始化操作有时候可以懒加载的，就是说通过单例模式结合懒加载在我们需要用到相关类的时候在进行初始化
	 2.将不是特别紧急的耗时操作放在低优先级的工作线程中来异步进行，或者在后台service中开启线程来进行
	   但是这样做有一个特别需要注意的地方,对于那些短耗时的操作来说，这么做其实很有可能造成负优化的效果，创建和切换线程造成更多开销

	 (3) Activity创建过程的优化
	     (1)在Activity的 onCreate() 和 onResume() 生命周期中，  
	        app的第一个frame其实都还没有绘制出来,Activity的布局和渲染过程其实是在 onResume执行之后才开始的.Activity在AMS置于resume状态后,Activity所属的Window会通过WindowManagerImpl,addView()将decorView放入到 ViewRoot中，然后ViewRoot发起 traversal遍历整个view树,进行布局和渲染，最终将画面绘制到屏幕上.
	        所以说在不影响业务流程的情况下，为了尽快将app的首帧绘制到屏幕上，我们最后将启动页的耗时操作(例如下载广告图)放在首帧绘制完成之后进行.
	     (2)自定义默认窗口背景，优化用户体验
	     	点击桌面上的应用图标，首先为我们展示的是一个空白的默认启动背景，为了避免白屏的出现而影响体验，最有效的方法还是需要修改默认的空白背景，替换为app的默认启动页画面.
	     	新建一个 shape.xml,背景使用app的默认启动图, 然后建立一个新的主题，并将该主题设为启动页Activity的background。
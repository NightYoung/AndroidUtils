第一步：重写三个构造方法
第二步：重写generateLayoutParams方法
/**
     * 设置ViewGroup的LayoutParams的类型
     * @param attrs
     * @return
     */
    @Override
    public LayoutParams generateLayoutParams(AttributeSet attrs) {
        return new MarginLayoutParams(getContext(),attrs);
    }
第三步：重写OnMeasure方法
/**
     * 计算所有的ChildView的宽度和高度，然后根据ChildView的计算结果，设置容器的宽和高
     * @param widthMeasureSpec
     * @param heightMeasureSpec
     */
    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {

        /**
         * 获得此iewGroup上级容器为其推荐的宽和高，以及计算模式
         */
        int widthMode = MeasureSpec.getMode(widthMeasureSpec);
        int sizeWidth = MeasureSpec.getSize(widthMeasureSpec);
        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
        int sizeHeight = MeasureSpec.getSize(heightMeasureSpec);

        /**
         * 计算所有的childView的宽和高
         */
        measureChildren(widthMeasureSpec, heightMeasureSpec);

        /**
         * 记录如果是wrap_content时设置的宽和高
         */
        int width = 0;
        int height = 0;

        int cCount = getChildCount();

        int cWidth = 0;
        int cHeight = 0;
        MarginLayoutParams cParams = null;

        /**
         * 用于计算左边两个childView的高度
         */
        int lHeight = 0;
        /**
         * 用于计算右边两个childView的高度
         */
        int rHeight = 0;
        /**
         * 用于计算上边两个childView的宽度
         */
        int tWidth = 0;
        /**
         * 用于计算下边两个childView的宽度
         */
        int bWidth = 0;

        /**
         * 根据childView计算出的宽和高以及设置的margin计算容器的宽和高，主要用于容器是wrap_content时
         */
        for (int i = 0; i < cCount; i++) {
            View childView = getChildAt(i);
            cWidth = childView.getMeasuredWidth();
            cHeight = childView.getMeasuredHeight();
            cParams = (MarginLayoutParams) childView.getLayoutParams();

            //上面两个childView
            if (i==0 || i==1){
                tWidth += cWidth +cParams.leftMargin+cParams.rightMargin;
            }
            if (i==2 || i==3){
                bWidth += cWidth+cParams.leftMargin+cParams.rightMargin;
            }
            if (i==0 || i==2){
                lHeight += cHeight+cParams.topMargin+cParams.bottomMargin;
            }
            if (i==1 || i==3){
                rHeight += cHeight+cParams.topMargin+cParams.bottomMargin;
            }
        }

        width = Math.max(tWidth,bWidth);
        height = Math.max(lHeight,rHeight);

        /**
         * 如果是warp_content，设置为我们计算的值；否则设置为父容器计算的值
         */
        setMeasuredDimension((widthMode == MeasureSpec.EXACTLY)?sizeWidth:
                width,(heightMode == MeasureSpec.EXACTLY)?sizeHeight:height);
    }
第四步：重写onLayout方法
/**
     * 设置childView的绘制区域
     * @param changed 改变
     * @param l 左
     * @param t 上
     * @param r 右
     * @param b 下
     */
    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {

        int cCount = getChildCount();
        int cWidth = 0;
        int cHeight = 0;
        MarginLayoutParams cParams = null;

        /**
         * 遍历所有的childView，根据其宽和高以及margin进行布局
         */
        for (int i = 0; i < cCount; i++) {
            View childView = getChildAt(i);
            cWidth = childView.getMeasuredWidth();
            cHeight = childView.getMeasuredHeight();
            cParams = (MarginLayoutParams) childView.getLayoutParams();

            int cl=0,ct=0,cr=0,cb=0;

            switch (i) {
                case 0:
                    cl = cParams.leftMargin;
                    ct = cParams.topMargin;
                    break;
                case 1:
                    cl = getWidth()-cWidth-cParams.leftMargin-cParams.rightMargin;
                    ct = cParams.topMargin;
                    break;
                case 2:
                    cl = cParams.leftMargin;
                    ct = getHeight()-cHeight-cParams.bottomMargin;
                    break;
                case 3:
                    cl = getWidth()-cWidth-cParams.leftMargin-cParams.rightMargin;
                    ct = getHeight()-cHeight-cParams.bottomMargin;
                    break;
                default: break;
            }
            cr = cl+cWidth;
            cb = ct+cHeight;
            childView.layout(cl,ct,cr,cb);
        }
    }


ViewDragHelper类的使用
1、创建实例（在构造方法里创建）
mDragger = ViewDragHelper.create(this, 1.0f, new ViewDragHelper.Callback(){});
2、触摸相关方法
@Override
    public boolean onInterceptTouchEvent(MotionEvent event){
        return mDragger.shouldInterceptTouchEvent(event);
    }

    @Override
    public boolean onTouchEvent(MotionEvent event){
        mDragger.processTouchEvent(event);
        return true;
    }
3、实现ViewDragHelper.CallCack相关方法
new ViewDragHelper.Callback(){
            @Override
            public boolean tryCaptureView(View child, int pointerId) {
                return true;
            }

            @Override
            public int clampViewPositionHorizontal(View child, int left, int dx) {
                return left;
            }

            @Override
            public int clampViewPositionVertical(View child, int top, int dy) {
                return top;
            }
        }
tryCaptureView如何返回ture则表示可以捕获该view，你可以根据传入的第一个view参数决定哪些可以捕获
clampViewPositionHorizontal,clampViewPositionVertical可以在该方法中对child移动的边界进行控制，left , top 分别为即将移动到的位置，比如横向的情况下，我希望只在ViewGroup的内部移动，
即：最小>=paddingleft，最大<=ViewGroup.getWidth()-paddingright-child.getWidth。



三、功能展示
边界检测、加速度检测(eg：DrawerLayout边界触发拉出)
回调Drag Release（eg：DrawerLayout部分，手指抬起，自动展开/收缩）
移动到某个指定的位置(eg:点击Button，展开/关闭Drawerlayout)

我们列一下所有的Callback方法：
onViewDragStateChanged
当ViewDragHelper状态发生变化时回调（IDLE,DRAGGING,SETTING[自动滚动时]）

onViewPositionChanged
当captureview的位置发生改变时回调

onViewCaptured
当captureview被捕获时回调

onViewReleased 已用

onEdgeTouched
当触摸到边界时回调。

onEdgeLock
true的时候会锁住当前的边界，false则unLock。

onEdgeDragStarted 已用

getOrderedChildIndex
改变同一个坐标（x,y）去寻找captureView位置的方法。（具体在：findTopChildUnder方法中）


getViewHorizontalDragRange 已用

getViewVerticalDragRange 已用

tryCaptureView 已用

clampViewPositionHorizontal 已用

clampViewPositionVertical 已用

总结下，方法的大致的回调顺序：
shouldInterceptTouchEvent：

DOWN:
    getOrderedChildIndex(findTopChildUnder)
    ->onEdgeTouched

MOVE:
    getOrderedChildIndex(findTopChildUnder)
    ->getViewHorizontalDragRange &
      getViewVerticalDragRange(checkTouchSlop)(MOVE中可能不止一次)
    ->clampViewPositionHorizontal&
      clampViewPositionVertical
    ->onEdgeDragStarted
    ->tryCaptureView
    ->onViewCaptured
    ->onViewDragStateChanged

processTouchEvent:

DOWN:
    getOrderedChildIndex(findTopChildUnder)
    ->tryCaptureView
    ->onViewCaptured
    ->onViewDragStateChanged
    ->onEdgeTouched
MOVE:
    ->STATE==DRAGGING:dragTo
    ->STATE!=DRAGGING:
        onEdgeDragStarted
        ->getOrderedChildIndex(findTopChildUnder)
        ->getViewHorizontalDragRange&
          getViewVerticalDragRange(checkTouchSlop)
        ->tryCaptureView
        ->onViewCaptured
        ->onViewDragStateChanged


public class VDHLayout extends LinearLayout {

    private ViewDragHelper mDragger;

    private View mAutoBackView;
    private View mDragView;
    private View mEdgeTrackerView;

    private Point mAutoBackOriginPos = new Point();

    public VDHLayout(Context context) {
        this(context,null);
    }

    public VDHLayout(Context context, AttributeSet attrs) {
        this(context, attrs,0);
    }

    public VDHLayout(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);

        mDragger = ViewDragHelper.create(this, 1.0f, new ViewDragHelper.Callback() {

            /**
             * 返回true表示可以捕获该View，进行移动
             * @param child
             * @param pointerId
             * @return
             */
            @Override
            public boolean tryCaptureView(View child, int pointerId) {
                return child == mDragView || child == mAutoBackView;
            }

            /**
             * 对child的移动边界（水平方向上）的控制
             * @param child
             * @param left
             * @param dx
             * @return
             */
            @Override
            public int clampViewPositionHorizontal(View child, int left, int dx) {
                return  left;
            }

            /**
             * 对child的移动边界（垂直方向上）的控制
             * @param child
             * @param top
             * @param dy
             * @return
             */
            @Override
            public int clampViewPositionVertical(View child, int top, int dy) {
                return top;
            }

            /**
             * 手指释放时返回原处的回调
             * @param releasedChild
             * @param xvel
             * @param yvel
             */
            @Override
            public void onViewReleased(View releasedChild, float xvel, float yvel) {
                if (releasedChild == mAutoBackView){
                    mDragger.settleCapturedViewAt(mAutoBackOriginPos.x,mAutoBackOriginPos.y);
                    invalidate();
                }
            }

            /**
             * 在边界拖动时的回调
             * @param edgeFlags
             * @param pointerId
             */
            @Override
            public void onEdgeDragStarted(int edgeFlags, int pointerId) {
                mDragger.captureChildView(mEdgeTrackerView,pointerId);
            }

            /**
             * 设置点击后不能移动重写的方法
             * @param child
             * @return
             */
            @Override
            public int getViewHorizontalDragRange(View child) {
                return getMeasuredWidth()-child.getMeasuredWidth();
            }

            /**
             * 设置点击后不能移动重写的方法
             * @param child
             * @return
             */
            @Override
            public int getViewVerticalDragRange(View child) {
                return getMeasuredHeight()-child.getMeasuredHeight();
            }
        });

        //设置在屏幕的哪边拖动有效
        mDragger.setEdgeTrackingEnabled(ViewDragHelper.EDGE_ALL);
    }

    /**
     * 事件的拦截方法的重写
     * @param ev
     * @return
     */
    @Override
    public boolean onInterceptTouchEvent(MotionEvent ev) {
        return mDragger.shouldInterceptTouchEvent(ev);
    }

    /**
     * 触摸事件的处理
     * @param event
     * @return
     */
    @Override
    public boolean onTouchEvent(MotionEvent event) {
        mDragger.processTouchEvent(event);
        return true;
    }

    /**
     * View持续拖动时调用的方法
     */
    @Override
    public void computeScroll() {
        if (mDragger.continueSettling(true)){
            invalidate();
        }
    }

    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        super.onLayout(changed, l, t, r, b);

        mAutoBackOriginPos.x = mAutoBackView.getLeft();
        mAutoBackOriginPos.y = mAutoBackView.getTop();
    }

    @Override
    protected void onFinishInflate() {
        super.onFinishInflate();

        mDragView = getChildAt(0);
        mAutoBackView = getChildAt(1);
        mEdgeTrackerView = getChildAt(2);
    }
}
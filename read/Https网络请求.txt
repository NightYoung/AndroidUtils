使用https进行网络请求
第一步：将证书拷贝到raw目录下
都知道Retrofit的网络请求是使用okhttp，所以我们只需要给
OkHttpClient.Builder().sslSocketFactory(sslSocketFactory)，那么SSLSocketFactory怎么得到呢，哈哈，不要急，方法已经写好：

public class SslContextFactory {
private static final String CLIENT_TRUST_PASSWORD = "changeit";//信任证书密码，该证书默认密码是changeit
private static final String CLIENT_AGREEMENT = "TLS";//使用协议
private static final String CLIENT_TRUST_MANAGER = "X509";
private static final String CLIENT_TRUST_KEYSTORE = "BKS";
SSLContext sslContext = null;
public SSLContext getSslSocket() {
try {
//取得SSL的SSLContext实例
sslContext = SSLContext.getInstance(CLIENT_AGREEMENT);
//取得TrustManagerFactory的X509密钥管理器实例
TrustManagerFactory trustManager = TrustManagerFactory.getInstance(CLIENT_TRUST_MANAGER);
//取得BKS密库实例
KeyStore tks = KeyStore.getInstance(CLIENT_TRUST_KEYSTORE);
InputStream is = MyApplication.getInstance().getResources().openRawResource(R.raw.suplcerts);
try {
tks.load(is, CLIENT_TRUST_PASSWORD.toCharArray());
} finally {
is.close();
}
//初始化密钥管理器
trustManager.init(tks);
//初始化SSLContext
sslContext.init(null, trustManager.getTrustManagers(), null);
} catch (Exception e) {
Log.e("SslContextFactory", e.getMessage());
}
return sslContext;    }}


给OkHttpClient.Builder().sslSocketFactory(sslSocketFactory)
SSLSocketFactory sslSocketFactory = new SslContextFactory().getSslSocket().getSocketFactory();
OkHttpClient.Builder okHttpClient = new OkHttpClient.Builder().sslSocketFactory(sslSocketFactory);


创建Retrofit对象
Retrofit retrofit = new Retrofit.Builder()
.addConverterFactory(GsonConverterFactory.create())//增加返回值为Gson的支持(以实体类返回)
.baseUrl("https://skyish-test.yunext.com")//主机地址
.client(okHttpClient.build())       /注意这里要给retrofit 设置okhttpclient
.build();


后面的创建请求的API跟调用API跟上面的使用http请求是一样的，可以自己找个接口试试，亲测，没有问题




@SuppressLint("TrulyRandom")
    private SSLSocketFactory createSSLSocketFactory() {

        String password = "123456";  //证书密码
        int ID_OF_CERTIFICATE = R.raw.suplcerts;  //证书的资源id

        SSLSocketFactory sslSocketFactory = null;

        try {
            //获取SSL的SSLContent实例
            SSLContext sslContext = SSLContext.getInstance("TLS");

            //获取TrustManagerFactory的X509实例
            TrustManagerFactory trustManager = TrustManagerFactory.getInstance("X509");

            //获取BKS密库实例
            KeyStore keyStore = KeyStore.getInstance("BKS");

            //获取证书的输入流(证书放在Raw文件夹下)
            InputStream in = getResources().openRawResource(ID_OF_CERTIFICATE);
            keyStore.load(in,password.toCharArray());

            //初始化密匙管理器
            trustManager.init(keyStore);

            //初始化SSLContent
            sslContext.init(null,trustManager.getTrustManagers(), new SecureRandom());
            sslSocketFactory = sslContext.getSocketFactory();

        } catch (IOException | NoSuchAlgorithmException | KeyStoreException | KeyManagementException | CertificateException e) {
            e.printStackTrace();
        }
        return sslSocketFactory;
    }

    private class TrustAllHostnameVerifier implements HostnameVerifier {

        @Override
        public boolean verify(String hostname, SSLSession session) {
            return true;
        }
    }

    private OkHttpClient getOkHttpClient() {

        OkHttpClient.Builder mbBuilder = new OkHttpClient.Builder();
        mbBuilder.sslSocketFactory(createSSLSocketFactory());
        mbBuilder.hostnameVerifier(new TrustAllHostnameVerifier());

        return mbBuilder.build();
    }



OkHttpClient.Builder mBuilder=mBuilder = new OkHttpClient.Builder();
mBuilder.sslSocketFactory(createSSLSocketFactory());
mBuilder.hostnameVerifier(new TrustAllHostnameVerifier());
mBuilder.build();
/**
 * 默认信任所有的证书
 * TODO 最好加上证书认证，主流App都有自己的证书
 *
 * @return
 */
@SuppressLint("TrulyRandom")
private static SSLSocketFactory createSSLSocketFactory() {

    SSLSocketFactory sSLSocketFactory = null;

    try {
        SSLContext sc = SSLContext.getInstance("TLS");
        sc.init(null, new TrustManager[]{new TrustAllManager()},
                new SecureRandom());
        sSLSocketFactory = sc.getSocketFactory();
    } catch (Exception e) {
    }

    return sSLSocketFactory;
}

private static class TrustAllManager implements X509TrustManager {
    @Override
    public void checkClientTrusted(X509Certificate[] chain, String authType)
            throws CertificateException {
    }

    @Override
    public void checkServerTrusted(X509Certificate[] chain, String authType)

            throws CertificateException {
    }

    @Override
    public X509Certificate[] getAcceptedIssuers() {
        return new X509Certificate[0];
    }
}

private static class TrustAllHostnameVerifier implements HostnameVerifier {
    @Override
    public boolean verify(String hostname, SSLSession session) {
        return true;
    }
}


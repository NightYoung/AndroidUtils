习惯用法
1.	延迟属性 属性延迟初始化
	val lazyVal: String by lazy{
		//定义延迟属性
	}
2.	扩展函数 在原有类的基础上新增方法
	fun String.spaceToCamelCase(){ //doSomething }
	"Convert this to camelcase".spaceToCamelCase()
	扩展属性 新增属性
	val <T> List<T>.lastIndex: Int
		get() = size -1
3.	创建单例
	object SingleTon{
		val name = "Name"
		fun sayName(){ println("my name is $name") }
	}
4.	if not null 的缩写 ?.
	val files = File("/").listFiles()
	println(files?.size)
5.	if not null and else 的缩写  ... ?. ... ?: ...
	println(files?.size ?: "empty")
6.	if null 执行一个语句 ... ?: ... 
	val values = ...
	val email = values["email"] ?: throw IllegastateException(" Email is lost")
7.	if not null 执行代码
	val value = ...
	value.let{
		...//如果value 不为空执行此处的代码
	}
8.	when返回表达式  相当于switch-case
9.	返回类型为Unit的方法的Builder风格用法	apply
10.	单表达式函数
	fun theAnswer() = 42
11.	一个对象实例调用多个方法	with
12.	try with resources
	val stream = Files.newInputStream(Path.get("/some/test.txt"))
	stream.buffered().reader().use {
		println( it.readText())	}

位运算
	shl		<<		有符号左移
	shr		>>		有符号右移
	ushr	>>>		无符号右移
	and		&		位与
	or 		|		位或
	xor		^		位异或
	inv		!		位非

布尔运算
	||		短路或
	&&		短路与
	!		逻辑非

类
1.	数据类	只保存数据，在主构造函数中声明所有属性
	data class User(val name: String, val sex: String)
2.	密封类	用sealed修饰 相当于枚举类的扩展 密封类是抽象的，不允许直接实例化 
	不允许有非private构造函数 
	sealed class Expr
3.	内部类  inner class User
4.	匿名内部类 object : View.OnClickListener(){
		override fun onClick(){ }
	}
5.	方法内部类
6.	嵌套类
7.	单例，伴生对象


解构声明
1.	把一个对象解构成多个变量
	for((key, value) in map){ }
2.	下划线用于未使用的变量
	val(_, status) = getResult()
3.lambda表达式中使用解构
	map.mapValues{ entry -> "$entry.value, $entry.key"}

集合(List,Set,Map)
1.	Kotlin区分可变集合和不可变集合(lists,sets,maps)
2.	val numbers: MutableLiat<Int> = mutableListOf(1,2,3)   //可变集合
	val readView: List<Int> = numbers    //不可变集合
	val items = listOf(1,2,3,4)  //不可变集合

区间
1.	区间表达式由具有操作符形式..的rangeTo函数辅以in和！in形成。区间是对任何比较类型定义的，但对于整型原生类型，它有一个优化实现。
	if(i in 1..10){ println(i) }  //等同于1<=i && i<=10
	for(i in 1..4){ println(i) }  迭代  for(i in 4 downTo 1){ println(i) }
2.	等差迭代区间
	for(i in 1..4 step 2) { print(i) }  //输出13
	for(i in 4 downTo 1 step 2){ print(i) }  //输出24
3.	闭开区间迭代(until函数)
	for(i in 1 until 10) { print(i) } // i in [1,10)
4.	一些实用函数
    rangeTo():浮点数没有定义rangeTo操作符，该函数返回的区间不能用于迭代
	downTo():该函数是为任何整型类型定义的
	reversed():该函数是为每个*Progression类定义的，并且所有这些函数返回反转后的数列
	step():该函数是为每个*Progression类定义的，所有这些函数都返回带有修改了step值得数列
	例：(1..12 step 2)   (1..12 step 3)  (1..12 step 4)  
5.	整型数列函数
	IntProgression/LongProgression/CharProgression 表示等差数列

类型检查与转换
1.	自动类型转换is/!is
	在运行时通过is/!is 操作符来检查对象是否符合给定类型，并且如果满足会自动转换为相应的类型
	if(obj is String){ print(obj.length) }  //obj自动转换为string
2.强制类型转换操作符as
	val x: String = y as    String   	//如果y为可空类型，则会报异常
	val x: String = y as    String? 	//如果y为空，则返回null
	val x: String = y as?  String	//安全的转换操作，在失败时返回null

相等性
1.	引用相等(两个引用指向同一对象)
	引用相等由 ===/!== 操作符判断
2.	结构相等(用equals()检查）
	结构相等由 ==/!= 操作符判断

空安全
1.	在Kotlin中导致空指针的情况只会出现在以下情况
	(1). 显示调用NullPointerException
	(2). 使用了!! 操作符
	(3). 外部java代码导致
	(4). 对于初始化,有一些数据不一致(如一个未初始化的this用于构造函数的某个地方)
2.	在Kotlin中，类型系统区分一个引用可以容纳null(可空引用)，还是不能容纳(非空引用)
	var strA: String = "abc"		//不允许str为null
	var strB: String? = "abc"	//str可以为null
	
	此时我们可以直接访问strA的相关属性
	如果直接访问strB的属性则会报错，则可以通过以下方法来访问strB的属性
	(1).在条件中检查null(只适用于strB是不可变的情况)
	(2).安全的调用--选择安全调用操作符 ?. ：
		strB?.length  如果strB非空，就返回strB.length，否则返回null，这个表达式的类型是Int?
		如果要只对非空值执行某个操作,安全调用操作符可以与let一起使用
		val list: List<String?> = listOf("A","B","null")
		for(item in list){ item?.let{ print(item) } }  //输出A,B 并忽略null
3.	Elvis操作符 ?:
	val  valA = strB?.length ?: -1
	如果?: 左侧表达式非空，Elvis操作符就返回其左侧表达式,否则就返回右侧表达式
	由于throw和return在Kotlin中都是表达式，所以它们也可以用于Elvis操作符右侧
4.	!! 操作符
	val intA = strA!!.length    如果strA为空,抛出NullPointerException异常
5.安全的类型转换
	val aInt: Int? = a as? Int    如果转换不成功,返回null
6.	可空类型的集合
	如果有一个包含空类型的集合,并且想要过滤掉null元素,则可以使用filterNotNull来实现
	val nullList: List<Int?> = listOf(1,2,3,4,null,5,6,null)
	val intList: List<Int> = nullList.filterNotNull()

异常
1.	Kotlin中所有异常类都是Throwable的子类,使用throw表达式抛出异常,try-cache-finally来捕获异常
2.	try是一个表达式,它可以有一个返回值;try表达式的返回值是try语句块中的最后一个表达式或者是catch语句块中的最后
	一个表达式,finally块中的内容不会影响表达式的结果
3.	Kotlin中没有受检异常
4.	Nothing类型：该类型没有返回值,而是用于标记永远不能达到的代码位置
	Nothing?类型：如果用null来初始化一个要推断类型的值,而又没有其它信息可用于确定更具体的类型时，编译器会推断出Nothing?类型
	val x = null  //x具有类型"Nothing?"

注解,类型别名
1.	注解声明:注解是将元数据附加到代码的方法,声明注解,需要将annotation修饰符放在类的前面
	annotation class Fancy
	annotation class Special(val why: String)
2.	typealias  NodeSet = Set<Network, Node>  可以给函数或者变量取别名


关键字与操作符
1.硬关键字:始终会被解释为关键字,不能用作标识符
	as：用于类型转换；
		   为导入指定一个别名
	as?：用于安全类型转换
	break：终止循环的执行
	class：	声明一个类
	continue：结束当次循环，继续下一次循环
	do：		开始一个do/while循环
	else：	if-else分支
	false：	boolean假
	for：	开始一个for循环
	fun：	声明一个函数
	if：	开始一个if-else表达式
	in：	指定在for循环中迭代对象；
			用作中缀操作符以检查一个值属于一个区间、 一个集合或者其他定义“contains”方法的实体；
			在when表达式中用于上述目的；
			将一个类型参数标记为逆变(使得一个类型参数只可以被消费而不能被生产 比如Comparable<in T>)；
	!in：	用作中缀操作符以检查一个值不属于一个区间、一个集合或者其他定义“contains”方法的实体；
			在when表达式中用于上述目的
	interface：声明一个接口
	is：	检查一个值具有指定类型
			在when表达式中用于上述目的
	!is：	检查一个值不具有指定类型
			在when表达式中用于上述目的
	null：表示不指向任何对象的对象引用常量
	object：同时声明一个类及其实例(单例)
	package：指定当前文件的包
	return：	函数返回
	super：	引用一个方法或属性的超类实现
					在次类构造函数中调用超类构造函数
	this：	引用当前接收者
				在次构造函数中同一个类的另一个构造函数
	throw：抛出一个异常
	true：布尔值 真
	try：开始一个异常处理快
	typealias：声明一个类型别名
	val：声明一个只读属性或局部变量
	var：声明一个可变属性或局部变量
	when：开始一个when表达式
	while：开始一个while循环
2.软关键字：在适当的上下文中充当关键字，而在其他上下文中可用作标识符
	by：将接口的实现委托给另一个对象
			将属性访问器的实现委托给另一个对象
	catch：异常处理快的开始
	constructor：构造函数关键字
	delegate：用作注解使用处目标
	dynamic：引用一个Kotlin/JS代码中的动态类型
	filed：用作注解使用处目标
	file：用作注解使用处目标
	finally：异常统一最终出口
	get：声明属性的 getter
			 用作注解使用处目标
	import： 将另一个包中的声明导入当前文件
	init： 开始一个初始化块
	param ：用作注解使用处目标
	property ：用作注解使用处目标
	receiver：用作注解使用处目标
	set：声明属性的 setter
			用作注解使用处目标
	setparam： 用作注解使用处目标
	where ：指定泛型类型参数的约束
3.修饰符关键字：作为声明中修饰符列表中的关键字，并可用作其他上下文中的标识符
	abstract：将一个类或成员标记为抽象
	annotation：声明一个注解类
	companion：声明一个伴生对象
	const：将属性标记为编译器常量
	crossinline：禁止传递给内联函数的lambda中非局部返回
	data：指示编译器为类生成典型成员
	enum：声明一个枚举
	external：将一个声明标记为不是在 Kotlin 中实现（通过 JNI 访问或者在 JavaScript 中实现）
	final： 禁止成员覆盖
	infix ：允许以中缀表示法调用函数
	inline ：告诉编译器在调用处内联传给它的函数和 lambda 表达式
	inner ：允许在嵌套类中引用外部类实例
	internal ：将一个声明标记为在当前模块中可见
	lateinit ：允许在构造函数之外初始化非空属性
	noinline ：关闭传给内联函数的 lambda 表达式的内联
	open ：允许一个类子类化或覆盖成员
	operator ：将一个函数标记为重载一个操作符或者实现一个约定
	out ：将类型参数标记为协变
	override ：将一个成员标记为超类成员的覆盖
	private ：将一个声明标记为在当前类或文件中可见
	protected ：将一个声明标记为在当前类及其子类中可见
	public ：将一个声明标记为在任何地方可见
	reified ：将内联函数的类型参数标记为在运行时可访问
	sealed ：声明一个密封类（限制子类化的类）
	suspend ：将一个函数或 lambda 表达式标记为挂起式（可用做协程）
	tailrec ：将一个函数标记为尾递归（允许编译器将递归替换为迭代）
	vararg ：允许一个参数传入可变数量的参数
4.特殊标识符：由编译器在指定上下文中定义，并且可以用作其他上下文中的常规标识符
	field ：用在属性访问器内部来引用该属性的幕后字段
	it ：用在 lambda 表达式内部来隐式引用其参数
5.操作符和特殊符号
	+、 -、 *、 /、 % —— 数学操作符
	* 也用于将数组传递给 vararg 参数
	
	=
		赋值操作符
		也用于指定参数的默认值
	
	+=、 -=、 *=、 /=、 %= —— 广义赋值操作符
	
	++、 -- —— 递增与递减操作符
	
	&&、 ||、 ! —— 逻辑“与”、“或”、“非”操作符（对于位运算，请使用相应的中缀函数）
	
	==、 != —— 相等操作符（对于非原生类型会翻译为调用 equals()）
	
	===、 !== —— 引用相等操作符
	
	<、 >、 <=、 >= —— 比较操作符（对于非原生类型会翻译为调用 compareTo()）
	
	[] 	—— 索引访问操作符（会翻译为调用 get 与 set）
	
	!! 	断言一个表达式非空
	
	?. 	执行安全调用（如果接收者非空，就调用一个方法或访问一个属性）
	
	?: 	如果左侧的值为空，就取右侧的值（elvis 操作符）
	
	:: 	创建一个成员引用或者一个类引用
	
	.. 	创建一个区间
	
	: 	分隔声明中的名称与类型
	
	? 	将类型标记为可空
	
	->
	分隔 lambda 表达式的参数与主体
	分隔在函数类型中的参数类型与返回类型声明
	分隔 when 表达式分支的条件与代码体
	
	@
	引入一个注解
	引入或引用一个循环标签
	引入或引用一个 lambda 表达式标签
	引用一个来自外部作用域的 “this”表达式
	引用一个外部超类
	
	; 	分隔位于同一行的多个语句
	
	$ 在字符串模版中引用变量或者表达式
	
	_
	在 lambda 表达式中代替未使用的参数
	在解构声明中代替未使用的参数